#include <DS3231.h>
#include <Servo.h>
#include <LiquidCrystal.h>
#include <Keypad.h>
#include <SPI.h>
#include <Ethernet.h>
const byte ROWS = 4; 
const byte COLS = 4; 
char keys[ROWS][COLS] = {

 {'1','2','3','A'},

  {'4','5','6','B'},

  {'7','8','9','C'},

  {'*','0','#','D'}

};

byte rowPins[ROWS] = { 22, 24, 26, 28 };
byte colPins[COLS] = { 30, 32, 34, 36 };

 Keypad kpd = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );
DS3231  rtc(A4, A5);
Servo servo_test;      
LiquidCrystal lcd( A0, A1, A2, A6, A7, A8);
// int angle = 0;    
// int potentio = A0;    
 int t1, t2, t3, t4, t5, t6;

 
boolean feed = true;
boolean feed1 = true;
boolean feed2 = true;

 char key;
 int r[6];
 int r1[6];
 int r2[6];
 String readString; 

byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED
};
IPAddress ip(172,17,203,201);

EthernetServer server(80);

 
 void setup() 
 { 
  servo_test.attach(9);  
  rtc.begin();
  lcd.begin(16,2);
  servo_test.write(55); 
  Serial.begin(9600);
  pinMode(A0, OUTPUT);
   pinMode(A1, OUTPUT);
    while (!Serial) {
    ;
  }

  Ethernet.begin(mac, ip);
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());
}
 
 
 
 void loop() 
 { 

lcd.setCursor(0,0);
 int i=0;

  lcd.clear();
 
  lcd.setCursor(0,1);

  
  while(1){
    key = kpd.getKey();

    char j;
    
  if(key!=NO_KEY){
    
    lcd.setCursor(j,1);
    
    lcd.print(key);
    Serial.print(key);
    
    r[i] = key-48;
    i++;
    j++;

    if (j==2)
    {
      lcd.print(":"); j++;
      Serial.print(":"); j++;
    }
   
  }
if (key=='A'){
 setFeedingTime();
}
if (key=='B'){
 setFeedingTime1();
}
if (key=='C'){
 setFeedingTime2();
}



 lcd.print("Time:");
 Serial.println("Time: ");
 String t = "";
 t = rtc.getTimeStr(); 
 t1 = t.charAt(0)-48;
 t2 = t.charAt(1)-48;
 t3 = t.charAt(3)-48;
 t4 = t.charAt(4)-48;
 t5 = t.charAt(6)-48;
 t6 = t.charAt(7)-48;
 
 lcd.print(rtc.getTimeStr());
 Serial.print(rtc.getTimeStr());
 lcd.setCursor(0,1);
 lcd.print("Date: ");
 Serial.print("Date: ");
 lcd.print(rtc.getDateStr());
 Serial.print(rtc.getDateStr());
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 if (t1==r[0] && t2==r[1] && t3==r[2] && t4==r[3]&& t5<1 && t6<3 && feed==true)
 { 
  servo_test.write(100);  
   lcd.setCursor(14,0);
 lcd.print("ok");
 Serial.print("ok");
   delay(5000);
    
  servo_test.write(55); 
   lcd.setCursor(13,0);
 lcd.print("set");
 
  feed=false;
 }///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////bbbbbbbbbbbbbbbbbbbbbbb
 else if (t1==r1[0] && t2==r1[1] && t3==r1[2] && t4==r1[3]&& t5<1 && t6<3 && feed1==true)
 { 
  servo_test.write(100);  
   lcd.setCursor(14,0);
 lcd.print("ok");
 Serial.print("ok");
   delay(5000);
    
  servo_test.write(55); 
   lcd.setCursor(13,0);
 lcd.print("set");
 
  feed1=false;
 }
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////ccccccccccccccccccccccc
else if (t1==r2[0] && t2==r2[1] && t3==r2[2] && t4==r2[3]&& t5<1 && t6<3 && feed2==true)
 { 
  servo_test.write(100);  
   lcd.setCursor(14,0);
 lcd.print("ok");
 Serial.print("ok");
   delay(5000);
    
  servo_test.write(55); 
   lcd.setCursor(13,0);
 lcd.print("set");
 
  feed2=false;
 }




 else if (t1==0 && t2==9 && t3==0 && t4==0&& t5<1 && t6<3 )
 { 
  servo_test.write(100);  
   lcd.setCursor(14,0);
 lcd.print("ok");
 Serial.print("ok");
   delay(5000);
    
  servo_test.write(55); 
   lcd.setCursor(13,0);
 lcd.print("set");
 
  
 }


 else if (t1==1 && t2==2 && t3==0 && t4==0&& t5<1 && t6<3)
 { 
  servo_test.write(100);  
   lcd.setCursor(14,0);
 lcd.print("ok");
 Serial.print("ok");
   delay(5000);
    
  servo_test.write(55); 
   lcd.setCursor(13,0);
 lcd.print("set");

 }


 else if (t1==1 && t2==8 && t3==0 && t4==0&& t5<1 && t6<3 )
 { 
  servo_test.write(100);  
   lcd.setCursor(14,0);
 lcd.print("ok");
 Serial.print("ok");
   delay(5000);
    
  servo_test.write(55); 
   lcd.setCursor(13,0);
 lcd.print("set");
 
 }
  EthernetClient client = server.available();
  if (client) {
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();

        
        if (readString.length() < 100) {

          
          readString += c; 
          Serial.print(c);
        } 

        
        if (c == '\n') {

         
          Serial.println(readString); 

          client.println("HTTP/1.1 200 OK"); 
          client.println("Content-Type: text/html");
          client.println();

          client.println("<HTML>");
          client.println("<HEAD>");
          client.println("<TITLE>pet feeding WEB</TITLE>");
          client.println("</HEAD>");
          client.println("<BODY>");

          client.println("<H1>-----------------------------------PET FEEDING AUTOMATION----------------------------------------</H1>");
          
          client.println("<a href=\"/?on\"\">-------------ON-----------</a>"); 
          client.println("<a href=\"/?off\"\">-----------OFF----------</a>"); 

          client.println("</BODY>");
          client.println("</HTML>");
 
          delay(1);
          
          client.stop(); 
           
          if(readString.indexOf("?on") >0)
          {
            servo_test.write(10);
          
            Serial.println("Led On");
          }
          if(readString.indexOf("?off") >0)
          {
            servo_test.write(110);
         
            Serial.println("Led Off");
          }
         
          readString="";
        } 
      }
    }
  }
 }       




 }












void setFeedingTime()
{
  feed = true;
   int i=0;

  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Set feeding Time");
  Serial.print("Set feeding Time"); 
 
  lcd.clear();
  lcd.print("HH:MM");
  Serial.print("HH:MM");
  lcd.setCursor(0,1);

  
  while(1){
    key = kpd.getKey();

    char j;
    
  if(key!=NO_KEY){
    
    lcd.setCursor(j,1);
    
    lcd.print(key);
    Serial.print(key);
    
    r[i] = key-48;
    i++;
    j++;

    if (j==2)
    {
      lcd.print(":"); j++;
      Serial.print(":"); j++;
    }
    delay(500);
  }

  if (key == 'D')
  {key=0; break; }
  }
}





void setFeedingTime1()
{
  feed1 = true;
   int i1=0;

  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Set feeding Time");
  Serial.print("Set feeding Time"); 
 
  lcd.clear();
  lcd.print("HH:MM");
  Serial.print("HH:MM");
  lcd.setCursor(0,1);

  
  while(1){
    key = kpd.getKey();

    char j1;
    
  if(key!=NO_KEY){
    
    lcd.setCursor(j1,1);
    
    lcd.print(key);
    Serial.print(key);
    
    r1[i1] = key-48;
    i1++;
    j1++;

    if (j1==2)
    {
      lcd.print(":"); j1++;
      Serial.print(":"); j1++;
    }
    delay(500);
  }

  if (key == 'D')
  {key=0; break; }
  }
}








void setFeedingTime2()
{
  feed2 = true;
   int i2=0;

  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Set feeding Time");
  Serial.print("Set feeding Time"); 
 
  lcd.clear();
  lcd.print("HH:MM");
  Serial.print("HH:MM");
  lcd.setCursor(0,1);

  
  while(1){
    key = kpd.getKey();

    char j2;
    
  if(key!=NO_KEY){
    
    lcd.setCursor(j2,1);
    
    lcd.print(key);
    Serial.print(key);
    
    r2[i2] = key-48;
    i2++;
    j2++;

    if (j2==2)
    {
      lcd.print(":"); j2++;
      Serial.print(":"); j2++;
    }
    delay(500);
  }

  if (key == 'D')
  {key=0; break; }
  }
